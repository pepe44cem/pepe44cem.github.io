from typing import Tuple, Iterator, Dict, List
from collections import deque

Graph = dict[tuple[int, int], set[tuple[int, int, int, int]]]

# ---------------------------- Grafo mov Automoviles --------------------------------------- #
graph = {
    # ---------------------------- Bordes ---------------------------------------
    # Línea exterior (borde) --------> /R/
    (1, 1): {(13, 1, 4, 12)},
    (13, 1): {(25, 1, 4, 12)},
    (25, 1): {(30, 1, 4, 5)},
    (30, 1): {(46, 1, 4, 16), (30, 10, 1, 9)},
    (46, 1): {(46, 10, 1, 9)},
    (46, 10): {(46, 17, 1, 7), (39, 10, 3, 7)},
    (46, 17): {(46, 22, 1, 5)},
    (46, 22): {(46, 33, 1, 11), (38, 22, 3, 8)},
    (46, 33): {(46, 46, 1, 13)},
    (46, 46): {(37, 46, 3, 9)},
    (37, 46): {(30, 46, 3, 7), (37, 41, 2, 5)},
    (30, 46): {(25, 46, 3, 5)},
    (25, 46): {(1, 46, 3, 24), (25, 39, 2, 7)},
    (1, 46): {(1, 34, 2, 12)},
    (1, 34): {(1, 22, 2, 12)},
    (1, 22): {(1, 17, 2, 5)},
    (1, 17): {(1, 1, 2, 16), (13, 17, 4, 12)},


    # Línea interior (borde) --------> /R/
    (2, 2): {(14, 2, 4, 12)},
    (14, 2): {(26, 2, 4, 12)},
    (26, 2): {(29, 2, 4, 3)},
    (29, 2): {(45, 2, 4, 16), (29, 9, 1, 7)},
    (45, 2): {(45, 9, 1, 7)},
    (45, 9): {(45, 18, 1, 9), (39, 9, 3, 6)},
    (45, 18): {(45, 21, 1, 3)},
    (45, 21): {(45, 28, 1, 7), (37, 21, 3, 8)},
    (45, 28): {(45, 29, 1, 1), (43, 28, 3, 2)},
    (45, 29): {(45, 34, 1, 5)},
    (45, 34): {(45, 45, 1, 11)},
    (45, 45): {(38, 45, 3, 7)},
    (38, 45): {(29, 45, 3, 9), (38, 39, 2, 7)},
    (29, 45): {(26, 45, 3, 3)},
    (26, 45): {(19, 45, 3, 7), (26, 33, 2, 12)},
    (19, 45): {(18, 45, 3, 1), (19, 43, 2, 2)},
    (18, 45): {(2, 45, 3, 16)},
    (2, 45): {(2, 41, 2, 4)},
    (2, 41): {(2, 40, 2, 1), (4, 41, 4, 2)},
    (2, 40): {(2, 33, 2, 7)},
    (2, 33): {(2, 21, 2, 12)},
    (2, 21): {(2, 18, 2, 3)},
    (2, 18): {(2, 13, 2, 5), (14, 18, 4, 12)},
    (2, 13): {(2, 12, 2, 1), (4, 13, 4, 2)},
    (2, 12): {(2, 2, 2, 10)},


    # ---------------------------- Glorieta --------------------------------------- #
    # Centro -------->
    # (25, 17)
    # (26, 17)
    # (26, 17)
    (29, 17): {(30, 17, 4, 1)},
    # (29, 18)
    (30, 21): {(30, 22, 1, 1)},
    # (30, 22)
    # (29, 22)
    (26, 22): {(25, 22, 3, 1)},
    # (25, 22)
    # (25, 21)
    (25, 18): {(25, 17, 2, 1)},

    
    # Afuera hacia adentro (externo) --------> /R/
    (30, 10): {(30, 17, 1, 7)},
    (38, 22): {(30, 22, 3, 8), (38, 33, 1, 11)},
    (25, 39): {(25, 38, 2, 1), (23, 39, 3, 2)},
    (25, 38): {(25, 34, 2, 4)},
    (25, 34): {(25, 27, 2, 7), (12, 34, 3, 13)},
    (25, 27): {(25, 26, 2, 1), (23, 27, 3, 2)},
    (25, 26): {(25, 22, 2, 4)},
    (13, 17): {(25, 17, 4, 12), (13, 7, 2, 10)},


    # Afuera hacia adentro (interno) --------> /R/
    (29, 9): {(29, 17, 1, 8)},
    (37, 21): {(30, 21, 3, 7), (37, 33, 1, 12)},
    (26, 33): {(26, 22, 2, 11), (17, 33, 3, 9)},
    (14, 18): {(25, 18, 4, 11), (14, 7, 2, 11)},


    # Adentro hacia afuera (externo) --------> /R/
    (25, 17): {(25, 1, 2, 16), (26, 17, 4, 1)},
    (30, 17): {(46, 17, 4, 16), (30, 18, 1, 1)},
    (30, 22): {(30, 26, 1, 4), (29, 22, 3, 1)},
    (30, 26): {(30, 27, 1, 1), (32, 26, 4, 2)},
    (30, 27): {(30, 33, 1, 6)},
    (30, 33): {(30, 46, 1, 13), (37, 33, 4, 7)},
    (25, 22): {(12, 22, 3, 13), (25, 21, 2, 1)},
    (12, 22): {(1, 22, 3, 11), (12, 34, 1, 12)},

    # Adentro hacia afuera (interno) --------> /R/
    (26, 17): {(26, 2, 2, 15), (29, 17, 4, 3)},
    (30, 18): {(45, 18, 4, 15), (30, 21, 1, 3)},
    (29, 22): {(29, 34, 1, 12), (26, 22, 3, 3)},
    (29, 34): {(29, 45, 1, 11), (37, 34, 4, 8)},
    (25, 21): {(11, 21, 3, 14), (25, 18, 2, 3)},
    (11, 21): {(2, 21, 3, 9), (11, 26, 1, 5)},

    # Calles
    # B1 
    # (externo)
    (13, 7): {(13, 6, 2, 1), (11, 7, 3, 2)},
    (13, 6): {(13, 1, 2, 5)},
    
    # (interno)
    (14, 7): {(14, 6, 2, 1), (16, 7, 4, 2)},
    (14, 6): {(14, 2, 2, 4)},


    # B2
    # (externo)
    (39, 10): {(38, 10, 3, 1), (39, 12, 1, 2)},
    (38, 10): {(35, 10, 3, 3)},
    (35, 10): {(34, 10, 3, 1), (35, 12, 1, 2)},
    (34, 10): {(30, 10, 3, 4)},

    # (interno)
    (39, 9): {(38, 9, 3, 1), (39, 7, 2, 2)},
    (38, 9): {(29, 9, 3, 9)},


    # B3
    # (externo)
    (37, 41): {(37, 40, 2, 1), (35, 41, 3, 2)},
    (37, 40): {(37, 34, 2, 6)},
    (37, 33): {(38, 33, 4, 1)},
    (38, 33): {(46, 33, 4, 8)},


    # (interno)
    (38, 39): {(38, 38, 2, 1), (40, 39, 4, 2)},
    (38, 38): {(38, 34, 2, 4)},
    (37, 34): {(38, 34, 4, 1)},
    (38, 34): {(45, 34, 4, 7)},


    # B4
    # (externo)
    (12, 34): {(11, 34, 3, 1), (12, 36, 1, 2)},
    (11, 34): {(1, 34, 3, 10)},

    # (interno)
    (17, 33): {(16, 33, 3, 1), (17, 31, 2, 2)},
    (16, 33): {(11, 33, 3, 5)},
    (11, 33): {(2, 33, 3, 9)},
    (11, 26): {(11, 27, 1, 1), (9, 26, 3, 2)},
    (11, 27): {(11, 33, 1, 6)},


    # Estacionamientos
    # Número 1
    (19, 43):{(19, 42, 2, 1)},
    (19, 42):{(18, 42, 3, 1)},
    (18, 42):{(18, 43, 1, 1)},
    (18, 43):{(18, 45, 1, 2)},

    # Número 2
    (4, 41): {(5, 41, 4, 1)},
    (5, 41): {(5, 40, 2, 1)},
    (5, 40): {(4, 40, 3, 1)},
    (4, 40): {(2, 40, 3, 2)},

    # Número 3
    (35, 41): {(34, 41, 3, 1)},
    (34, 41): {(34, 40, 2, 1)},
    (34, 40): {(35, 40, 4, 1)},
    (35, 40): {(37, 40, 4, 2)},

    # Número 4
    (23, 39): {(22, 39, 3, 1)},
    (22, 39): {(22, 38, 2, 1)},
    (22, 38):{(23, 38, 4, 1)},
    (23, 38):{(25, 38, 4, 2)},

    # Número 5
    (40, 39):{(41, 39, 4, 1)},
    (41, 39):{(41, 38, 2, 1)},
    (41, 38):{(40, 38, 3, 1)},
    (40, 38):{(38, 38, 3, 2)},

    # Número 6
    (12, 36):{(12, 37, 1, 1)},
    (12, 37):{(11, 37, 3, 1)},
    (11, 37):{(11, 36, 2, 1)},
    (11, 36):{(11, 34, 2, 2)},

    # Número 7
    (17, 31):{(17, 30, 2, 1)},
    (17, 30):{(16, 30, 3, 1)},
    (16, 30):{(16, 31, 1, 1)},
    (16, 31):{(16, 33, 1, 2)},

    # Número 8
    (43, 28):{(42, 28, 3, 1)},
    (42, 28):{(42, 29, 1, 1)},
    (42, 29):{(43, 29, 4, 1)},
    (43, 29):{(45, 29, 4, 2)},

    # Número 9
    (9, 26):{(8, 26, 3, 1)},
    (8, 26):{(8, 27, 1, 1)},
    (8, 27):{(9, 27, 4, 1)},
    (9, 27):{(11, 27, 4, 2)},

    # Número 10
    (23, 27):{(22, 27, 3, 1)},
    (22, 27):{(22, 26, 2, 1)},
    (22, 26):{(23, 26, 4, 1)},
    (23, 26):{(25, 26, 4, 2)},

    # Número 11
    (32, 26):{(33, 26, 4, 1)},
    (33, 26):{(33, 27, 1, 1)},
    (33, 27):{(32, 27, 3, 1)},
    (32, 27):{(30, 27, 3, 2)},
    
    # Número 12
    (4, 13):{(5, 13, 4, 1)},
    (5, 13):{(5, 12, 2, 1)},
    (5, 12):{(4, 12, 3, 1)},
    (4, 12):{(2, 12, 3, 2)},

    # Número 13
    (35, 12):{(35, 13, 1, 1)},
    (35, 13):{(34, 13, 3, 1)},
    (34, 13):{(34, 12, 2, 1)},
    (34, 12):{(34, 10, 2, 2)},


    # Número 14
    (39, 12): {(39, 13, 1, 1)},
    (39, 13): {(38, 13, 3, 1)},
    (38, 13): {(38, 12, 2, 1)},
    (38, 12): {(38, 10, 2, 2)},

    # Número 15
    (11, 7): {(10, 7, 3, 1)},
    (10, 7): {(10, 6, 2, 1)},
    (10, 6): {(11, 6, 4, 1)},
    (11, 6): {(13, 6, 4, 2)},

    # Número 16
    (16, 7): {(17, 7, 4, 1)},
    (17, 7): {(17, 6, 2, 1)},
    (17, 6): {(16, 6, 3, 1)},
    (16, 6): {(14, 6, 3, 2)},

    # Número 17
    (39, 7): {(39, 6, 2, 1)},
    (39, 6): {(38, 6, 3, 1)},
    (38, 6): {(38, 7, 1, 1)},
    (38, 7): {(38, 9, 1, 2)},

    # ---------------------------- Desviaciones --------------------------------------- #
    # Borde inferior -------->
    (5, 1): {(13, 1, 4, 8)},
    (7, 1): {(13, 1, 4, 6)},
    (9, 1): {(13, 1, 4, 4)},
    (11, 1): {(13, 1, 4, 2)},
    (17, 1): {(25, 1, 4, 8)},
    (19, 1): {(25, 1, 4, 6)},
    (21, 1): {(25, 1, 4, 4)},
    (23, 1): {(25, 1, 4, 2)},
    (38, 2): {(45, 2, 4, 7)},

    # Borde derecho -------->
    (46, 5): {(46, 10, 1, 5)},
    (46, 7): {(46, 10, 1, 3)},
    (46, 13): {(46, 17, 1, 4)},
    (46, 15): {(46, 17, 1, 2)},
    (46, 25): {(46, 33, 1, 8)},
    (46, 27): {(46, 33, 1, 6)},
    (46, 29): {(46, 33, 1, 4)},
    (46, 31): {(46, 33, 1, 2)},
    (46, 38): {(46, 46, 1, 8)},
    (46, 40): {(46, 46, 1, 6)},
    (46, 42): {(46, 46, 1, 4)},
    (46, 44): {(46, 46, 1, 2)},
    (45, 26): {(45, 29, 1, 3)},

    # Borde superior -------->
    (42, 46): {(37, 46, 3, 5)},
    (40, 46): {(37, 46, 3, 3)},
    (34, 46): {(30, 46, 3, 4)},
    (32, 46): {(30, 46, 3, 2)},
    (20, 46): {(1, 46, 3, 19)},
    (18, 46): {(1, 46, 3, 17)},
    (16, 46): {(1, 46, 3, 15)},
    (14, 46): {(1, 46, 3, 13)},
    (12, 46): {(1, 46, 3, 11)},
    (10, 46): {(1, 46, 3, 9)},
    (8, 46): {(1, 46, 3, 7)},
    (6, 46): {(1, 46, 3, 5)},
    (4, 46): {(1, 46, 3, 3)},
    (22, 25): {(18, 45, 3, 4)},
    (13, 46): {(1, 46, 3, 1)},
    (22, 45): {(2, 45, 3, 20)},

    # Borde izquierdo -------->
    (1, 42): {(1, 34, 2, 8)},
    (1, 40): {(1, 34, 2, 6)},
    (1, 38): {(1, 34, 2, 4)},
    (1, 36): {(1, 34, 2, 2)},
    (1, 30): {(1, 22, 2, 8)},
    (1, 28): {(1, 22, 2, 6)},
    (1, 26): {(1, 22, 2, 4)},
    (1, 24): {(1, 22, 2, 2)},
    (1, 9): {(1, 1, 2, 8)},
    (1, 7): {(1, 1, 2, 6)},
    (1, 5): {(1, 1, 2, 4)},
    (1, 3): {(1, 1, 2, 2)},
    (2, 27): {(2, 21, 2, 6)},
    # (2, 13): {(2, 12, 2, 1)},

    # Bloque 1 -------->
    (5, 17): {(13, 17, 4, 8)},
    (7, 17): {(13, 17, 4, 6)},
    (9, 17): {(13, 17, 4, 4)},
    (11, 17): {(13, 17, 4, 2)},
    (17, 17): {(25, 17, 4, 8)},
    (19, 17): {(25, 17, 4, 6)},
    (21, 17): {(25, 17, 4, 4)},
    (23, 17): {(25, 17, 4, 2)},
    (26, 14): {(26, 2, 2, 12)},
    (26, 12): {(26, 2, 2, 10)},
    (26, 10): {(26, 2, 2, 8)},
    (26, 8): {(26, 2, 2, 6)},
    (26, 6): {(26, 2, 2, 4)},
    (26, 4): {(26, 2, 2, 2)},
    (7, 18): {(14, 18, 4, 7)},

    # Bloque 2 -------->
    (29, 4): {(29, 9, 1, 5)},
    (29, 6): {(29, 9, 1, 3)},
    (29, 13): {(29, 17, 1, 4)},
    (29, 15): {(29, 17, 1, 2)},
    (29, 14): {(29, 17, 1, 3)},
    (37, 18): {(45, 18, 4, 7)},

    # Bloque 3 -------->
    (38, 42): {(38, 34, 2, 8)},
    (38, 40): {(38, 34, 2, 6)},
    # (38, 38): {(38, 34, 2, 4)},
    (38, 36): {(38, 34, 2, 2)},
    (34, 21): {(30, 21, 3, 4)},
    (29, 30): {(29, 34, 1, 4)},
    (29, 39): {(29, 45, 1, 6)},
    
    # Bloque 4 -------->
    (26, 42): {(26, 33, 2, 9)},
    (26, 40): {(26, 33, 2, 7)},
    (26, 38): {(26, 33, 2, 5)},
    (26, 36): {(26, 33, 2, 3)},
    (26, 34): {(26, 33, 2, 1)},
    
    (22, 33): {(11, 33, 3, 11)},
    (20, 33): {(11, 33, 3, 9)},
    (18, 33): {(11, 33, 3, 7)},
    #(16, 33): {11, 33, 3, 5},

    (12, 26): {(12, 34, 1, 8)},
    (12, 28): {(12, 34, 1, 6)},
    (12, 30): {(12, 34, 1, 4)},
    (22, 21): {(11, 21, 3, 11)},
    (15, 21): {(11, 21, 3, 4)},
    (26, 29): {(26, 22, 2, 7)},


    # ---------------------------- Desviaciones glorieta --------------------------------------- #
    (31, 17): {(46, 17, 4, 15)},
    (31, 18): {(45, 18, 4, 14)},

    (30, 23): {(30, 26, 1, 3)},
    (29, 23): {(29, 34, 1, 11)},

    (24, 22): {(12, 22, 3, 12)},
    (24, 21): {(11, 21, 3, 11)},

    (31, 2): {(45, 2, 4, 13)},
    (31, 1): {(46, 1, 4, 15)},

    (1, 16): {(1, 1, 2, 15)},
    (2, 16): {(2, 13, 2, 3)}
}

# ---------------------------- Diccionario recalcular ruta --------------------------------------- #
desviacionesGlorieta = {
    (30, 17) : (31, 17),
    (30, 18) : (31, 18),
    (29, 22) : (29, 23),
    (30, 22) : (30, 23),
    (25, 22) : (24, 22),
    (25, 21) : (24, 21),
    (1, 17) : (1, 16),
    (2, 17) : (2, 16),
    (30, 1) : (31, 1),
    (30, 2) : (31, 2)
}

# ---------------------------- Set overtake --------------------------------------- #
desviacionesSet = {
    # Borde inferior
    (4, 2), (6, 2), (8, 2), (10, 2), (16, 2), (18, 2), (20, 2), (22, 2), (37, 1), 
    
    # Borde derecho
    (45, 4), (45, 6), (45, 12), (45, 14), (45, 24), (45, 26), (45, 28),
    (45, 30), (45, 37), (45, 39), (45, 41), (45, 43), (46, 25),
    
    # Borde superior
    (43, 45), (41, 45), (35, 45), (33, 45), (21, 45), (19, 45), (17, 45), 
    (15, 45), (13, 45), (11, 45), (9, 45), (7, 45), (5, 45), (23, 46),
    (14, 45),

    # Borde izquierdo
    (2, 43), (2, 41), (2, 39), (2, 37), (2, 31), (2, 29), (2, 27), 
    (2, 25), (2, 10), (2, 8), (2, 6), (2, 4), (1, 28), (1, 14),

    # Bloque 1
    (4, 18), (6, 18), (8, 18), (10, 18), (16, 18), (18, 18), (20, 18),
    (22, 18), (25, 15), (25, 13), (25, 11), (25, 9), (25, 7), (25, 5),
    (6, 17),

    # Bloque 2
    (30, 3), (30, 5), (30, 12), (30, 14), (30, 13), (36, 17),

    # Bloque 3
    (37, 43), (37, 41), (37, 39), (37, 37), (35, 22), (30, 29),
    (30, 38),

    # Bloque 4
    (25, 43), (25, 41), (25, 39), (25, 37), (25, 35),
    (23, 34), (21, 34), (19, 34), (17, 34),
    (11, 29), (11, 27), (11, 25), (23, 22), (16, 22),
    (25, 30)
    }


# ---------------------------- Diccionario cruce personas --------------------------------------- #
crucePersonas = { #type: ignore
    # Borde inferior-------->
    #[X, Y, DIR] : [(X, Y), ()],
    (12, 3, 4): [(13, 4), (14, 4), (14, 5), (13, 3), (14, 3)],
    (24, 3, 2): [(23, 2), (23, 1), (22, 1), (24, 2), (24, 1)],
    (24, 3, 4): [(25, 4), (26, 4), (26, 5), (25, 3), (26, 3)],
    (28, 3, 4): [(29, 2), (30, 2), (30, 1), (29, 3), (30, 3)],

    # Borde derecho-------->
    (44, 8, 1): [(45, 9), (45, 10), (46, 10), (44, 9), (44, 10)],
    (44, 16, 1): [(43, 17), (43, 18), (42, 18), (44, 17), (44, 18)],
    (44, 20, 1): [(45, 21), (45, 22), (46, 22), (44, 21), (44, 22)],
    
    # Borde superior-------->
    (39, 44, 3): [(38, 45), (37, 45), (37, 46), (38, 44), (37, 44)],
    (31, 44, 1): [(32, 45), (32, 46), (33, 46), (31, 45), (31, 46)],
    (31, 44, 3): [(30, 43), (29, 43), (29, 42), (30, 44), (29, 44)],
    (27, 44, 3): [(26, 45), (25, 45), (25, 46), (26, 44), (25, 44)],

    # Borde izquierdo-------->
    (3, 35, 2): [(4, 34), (4, 33), (5, 33), (3, 34), (3, 33)],
    (3, 23, 2): [(4, 22), (4, 21), (5, 21), (3, 22), (3, 21)],
    (0, 23, 4): [(1, 24), (2, 24), (2, 25), (1, 23), (2, 23)],
    (3, 19, 2): [(2, 18), (2, 17), (1, 17), (3, 18), (3, 17)],
    
    # Bloque 1 -------->
    (15, 16, 3): [(14, 17), (13, 17), (13, 18), (14, 16), (13, 16)],
    (24, 16, 4): [(25, 17), (25, 18), (26, 17), (25, 16), (26, 16)],

    # Bloque 2 -------->
    (31, 16, 1): [(30, 17), (30, 18), (19, 17), (31, 17), (31, 18)],
    (28, 16, 4): [(29, 15), (30, 15), (30, 14), (29, 16), (30, 16)],
    (31, 11, 2): [(32, 10), (32, 9), (33, 9), (31, 10), (31, 9)],
    
    # Bloque 3 -------->
    (31, 20, 1): [(32, 21), (32, 22), (33, 22), (31, 21), (31, 22)],
    (31, 23, 3): [(30, 22), (29, 22), (30, 21), (30, 23), (29, 23)],
    (36, 23, 4): [(37, 22), (38, 22), (39, 22), (38, 21), (37, 23), (38, 23)],
    (36, 32, 1): [(35, 33), (35, 34), (34, 34), (36, 33), (36, 34)],
    (39, 32, 3): [(38, 31), (37, 31), (37, 30), (38, 32), (37, 32)],
    (31, 35, 2): [(30, 34), (30, 33), (29, 33), (31, 34), (31, 33)],
    (36, 35, 4): [(37, 34), (38, 34), (38, 33), (37, 35), (38, 35)],
    
    # Bloque 4 -------->
    (27, 23, 3): [(26, 24), (25, 24), (25, 25), (26, 23), (25, 23)],
    (24, 23, 2): [(25, 22), (25, 21), (26, 22), (24, 22), (24, 21)], 
    (13, 32, 1): [(14, 33), (14, 34), (15, 34), (13, 33), (13, 34)],
    (13, 32, 3): [(12, 31), (11, 31), (11, 30), (12, 32), (11, 32)],
    (10, 23, 4): [(10, 23), (13, 22), (12, 22), (11, 22), (11, 23), (12, 23)],
    (24, 19, 2): [(23, 18), (22, 18), (22, 17), (24, 18), (24, 17)]
}


def breadth_first_search(start: Tuple[int, int], end: Tuple[int, int], graph: Graph) -> List[Tuple[int, int, int]]:
    queue = deque([start])
    visited = set()
    path = {start: []} # type: ignore
    
    while queue:
        current = queue.popleft()
        if current == end:
            return [start] + path[current]
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor[:2] not in visited:

                    queue.append(neighbor[:2])
                    path[neighbor[:2]] = path[current] + [neighbor]
    return []